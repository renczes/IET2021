% Matlab source code of the proposed method
function [A_opt, B_opt, C_opt, w_opt] = sfit4_parab(x, w0, dw)
s = size(x);
if (s(2) > s(1))
    x = x.';
end
N = length(x);
n = (1:N).';
[A_ipfft, B_ipfft, C_ipfft] = sfit3(w0, x);
y_ipfft = C_ipfft + A_ipfft*cos(w0*n) + B_ipfft*sin(w0*n);
e_ipfft = x-y_ipfft;
CF_ipfft = e_ipfft.'*e_ipfft;
[A1, B1, C1] = sfit3(w0-dw, x);
y1 = C1 + A1*cos((w0 - dw)*n) + B1*sin((w0 - dw)*n);
e1 = x-y1;
CF1 = e1.'*e1;
[A2, B2, C2] = sfit3(w0+dw, x);
y2 = C2 + A2*cos((w0 + dw)*n) + B2*sin((w0 + dw)*n);
e2 = x-y2;
CF2 = e2.'*e2;
M = [1/2 -1 1/2; -1/2 0 1/2; 0 1 0;];
p_parab = M*[CF1; CF_ipfft; CF2;];
dw_opt = -p_parab(2)/(2*p_parab(1))*dw;
w_opt = w0 + dw_opt;
[A_opt, B_opt, C_opt] = sfit3(w_opt, x);
y_opt = C_opt + A_opt*cos(n*w_opt) + B_opt*sin(n*w_opt);
e_opt = x - y_opt;
CF_opt = e_opt.'*e_opt;
end

% This function performs a three-parameters least squares fit
function [A, B, C] = sfit3(w, x)
N = length(x);
n = (1:N).';
Fi1 = w;
h11 = N/2 + cos((N+1)*Fi1)*sin(N*Fi1)/(2*sin(Fi1));
h12 = 1/2*(sin(N*Fi1)*sin((N+1)*Fi1))/(sin(Fi1));
h13 = (cos((N+1)*Fi1/2)*sin(N*Fi1/2))/(sin(Fi1/2));
h21 = h12;
h22 = N - h11;
h23 = (sin((N+1)*Fi1/2)*sin(N*Fi1/2))/(sin(Fi1/2));
h31 = h13;
h32 = h23;
h33 = N;
H = [h11 h12 h13; h21 h22 h23; h31 h32 h33];
Hinv = pinv(H);
D = [cos(w*n), sin(w*n), ones(N,1)];
p = Hinv*(D.'*x);
A = p(1);
B = p(2);
C = p(3);
end

% C version of the proposed method

void LS4p_parab(float32_t* y, float32_t J_init, float32_t dJ, uint32_t N, float32_t* pM_vect)
{
	float32_t pM_vect_0[9], pM_vect_opt[3], CF_opt;
	float32_t J = J_init, J_opt;
	float32_t w = J*2*M_PI/N, dw = dJ*2*M_PI/N, dw_opt, w_opt;
	float32_t M_vect[9] = { 0.5, -1.0, 0.5, -0.5, 0.0, 0.5, 0.0, 1.0, 0.0 };
	float32_t parab_vect[3], CF_vect[3]; // CF
	arm_matrix_instance_f32 M, parab, CF;
	arm_status status;
	LS3p(y, J - dJ, N, pM_vect_0, CF_vect);
	LS3p(y, J, N, pM_vect_0 + 3, CF_vect + 1);
	LS3p(y, J + dJ, N, pM_vect_0 + 6, CF_vect + 2);
	arm_mat_init_f32(&M, 3, 3, M_vect);
	arm_mat_init_f32(&CF, 3, 1, CF_vect);
	arm_mat_init_f32(&parab, 3, 1, parab_vect);
	status = arm_mat_mult_f32(&M, &CF, &parab);
	if ( status != ARM_MATH_SUCCESS)
	{
		print_error_func("Error: LS4p_parab, status = arm_mat_mult_f32(&M, &CF, &parab);");
	}
	dw_opt = -parab_vect[1]/2/parab_vect[0]*dw;
	w_opt = w + dw_opt;
	J_opt = w_opt*N/(2*M_PI);
	LS3p(y, J_opt, N, pM_vect_opt, NULL);
	pM_vect[0] = pM_vect_opt[0];
	pM_vect[1] = pM_vect_opt[1];
	pM_vect[2] = pM_vect_opt[2];
	pM_vect[3] = J_opt;
}

% Three-parameters least squares fit

void LS3p(float32_t* y, float32_t J, uint32_t N, float32_t* pM_vect, float32_t* CF)
{
	float32_t X_matrix_vect[3*SAMPLES/2], DT_vect[3*SAMPLES/2], DTD_vect[9], DTD_inv_vect[9], DTy_vect[3];
	float32_t yfit_vect[SAMPLES/2], e_vect[SAMPLES/2];
	arm_matrix_instance_f32 D, DT, DTD, DTD_inv, yM, DTy, pM, yfit;
	arm_status status;
	uint32_t n;
	float32_t c;

	for (n = 0; n < SAMPLES/2; n++)
	{
		c = 2*M_PI*(n+1)/N;
		X_matrix_vect[3*n] = arm_cos_f32(c*J);
		X_matrix_vect[3*n + 1] = arm_sin_f32(c*J);
		X_matrix_vect[3*n + 2] = 1.0;
	}
	arm_mat_init_f32(&D, SAMPLES/2, 3, X_matrix_vect);
	arm_mat_init_f32(&DT, 3, SAMPLES/2, DT_vect);
	arm_mat_init_f32(&DTD, 3, 3, DTD_vect);
	arm_mat_init_f32(&DTD_inv, 3, 3, DTD_inv_vect);
	arm_mat_init_f32(&yM, SAMPLES/2, 1, y);
	arm_mat_init_f32(&DTy, 3, 1, DTy_vect);
	arm_mat_init_f32(&pM, 3, 1, pM_vect);
	arm_mat_init_f32(&yfit, SAMPLES/2, 1, yfit_vect);
	status = arm_mat_trans_f32(&D, &DT);
	if ( status != ARM_MATH_SUCCESS)
	{
		print_error_func("Error: LS3p, status = arm_mat_trans_f32(&D, &DT);");
	}
	status = arm_mat_mult_f32(&DT, &D, &DTD);
	if ( status != ARM_MATH_SUCCESS)
	{
		print_error_func("Error: LS3p, status = arm_mat_mult_f32(&DT, &D, &DTD);");
	}
	status = arm_mat_inverse_f32(&DTD, &DTD_inv);
	if ( status != ARM_MATH_SUCCESS)
	{
		print_error_func("Error: LS3p, status = arm_mat_inverse_f32(&DTD, &DTD_inv);");
	}
	status = arm_mat_mult_f32(&DT, &yM, &DTy);
	if ( status != ARM_MATH_SUCCESS)
	{
		print_error_func("Error: LS3p, status = arm_mat_mult_f32(&DT, &yM, &DTy);");
	}
	status = arm_mat_mult_f32(&DTD_inv, &DTy, &pM);
	if ( status != ARM_MATH_SUCCESS)
	{
		print_error_func("Error: LS3p, status = arm_mat_mult_f32(&DTD_inv, &DTy, &pM);");
	}

	if (CF)
	{
		status = arm_mat_mult_f32(&D, &pM, &yfit);
		if ( status != ARM_MATH_SUCCESS)
		{
			print_error_func("Error: LS3p_mod, status = arm_mat_mult_f32(&DTD_inv, &DTy, &pM);");
		}

		arm_sub_f32(y, yfit_vect, e_vect, SAMPLES/2);

		arm_dot_prod_f32(e_vect, e_vect, SAMPLES/2, CF);
	}
}